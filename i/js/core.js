// Generated by CoffeeScript 1.5.0
var MBCore, child_process, connect, fs, getHome, main, marked, mime, path, util, watch;

fs = require('fs');

path = require('path');

util = require('util');

child_process = require('child_process');

mime = require('mime');

connect = require('connect');

marked = require('marked');

watch = require('watch');

getHome = function() {
  if (process.platform === 'win32') {
    return path.join(process.env['USERPROFILE'], "Marboo");
  } else {
    return path.join(process.env['HOME'], ".marboo");
  }
};

MBCore = function(ui) {
  this.marboo_home = getHome();
  this.source_dir = path.join(this.marboo_home, "source");
  this.build_dir = path.join(this.marboo_home, "build");
  this.ui = ui;
  return this;
};

util.inherits(MBCore, process.EventEmitter);

MBCore.prototype.watch = function() {
  var self;
  self = this;
  return watch.watchTree(this.source_dir, function(f, curr, prev) {
    if (typeof f === "object" && prev === null && curr === null) {
      return console.log("begin monitor: %s", f);
    } else if (prev === null) {
      console.log("new: %s", f);
      return self.route(f.replace(self.source_dir, ""));
    } else if (curr.nlink === 0) {
      return console.log("removed: %s", f);
    } else {
      console.log("modified: %s", f);
      return self.route(f.replace(self.source_dir, ""));
    }
  });
};

MBCore.prototype.initHttpServer = function() {
  return connect.createServer(connect["static"](this.build_dir)).listen(8000);
};

MBCore.prototype.getDestUrl = function(src_path) {
  return path.join(this.build_dir, src_path);
};

MBCore.prototype.route = function(src_path) {
  var components, data, ext, file_mime, script_path, self, sub_ext;
  console.log("route path: %s", src_path);
  self = this;
  components = src_path.split(".");
  ext;
  sub_ext;
  if (components.length > 1) {
    ext = components[components.length - 1];
    sub_ext = components[components.length - 2];
  }
  script_path = this.getTemplatePath(src_path, 1);
  if (fs.existsSync(script_path)) {
    self.generateHtml(src_path, script_path, src_path);
  }
  if (ext !== void 0) {
    if (ext === "rst") {

    } else if (ext === "md" || ext === "markdown") {
      data = fs.readFileSync(path.join(self.source_dir, src_path)).toString();
      this.writeToHtml(src_path, marked(data));
    } else if (ext === "html" || ext === "htm") {
      console.log("html");
    }
  }
  file_mime = mime.lookup(src_path);
  if (file_mime.split("/")[0] === "text") {
    return console.log(file_mime);
  } else if (file_mime.split("/")[0] === "image") {
    return console.log(file_mime);
  } else if (file_mime.split("/")[0] === "audio") {
    return console.log(file_mime);
  } else if (file_mime.split("/")[0] === "video") {
    return console.log(file_mime);
  }
};

MBCore.prototype.writeToHtml = function(src_path, content) {
  var dest_path, format, self, template_path;
  self = this;
  template_path = this.getTemplatePath(src_path, 2);
  if (fs.existsSynctemplate_path) {
    format = fs.readFileSync(template_path).toString().replace("%@", "%s");
    content = util.format(format, content);
  } else {
    console.log("no output template found, use origin content");
  }
  dest_path = util.format("%s.html", this.getDestUrl(src_path));
  console.log("write to path: %s", dest_path);
  fs.writeFileSync(dest_path, content);
  return self.emit("fileModified");
};

MBCore.prototype.generateHtml = function(src_path, script_path, template_path) {
  var options;
  options = {};
  options.cwd = path.dirname(script_path);
  return child_process.execFile(script_path, options, function(error, stdout, stderr) {
    if (error) {
      return console.log(error);
    } else {
      return console.log("succeed");
    }
  });
};

MBCore.prototype.getTemplatePath = function(src_path, cate) {
  var components, ext, media_path, sub_ext, sub_path;
  components = src_path.split(".");
  ext;
  sub_ext;
  media_path;
  if (components.length > 1) {
    ext = components[components.length - 1];
    sub_ext = components[components.length - 2];
  }
  if (ext === void 0) {
    return void 0;
  }
  switch (cate) {
    case 0:
      media_path = util.format("%s/media/file_init/default.init.%s", this.source_dir, ext);
      break;
    case 1:
      media_path = util.format("%s/media/bin/%s.convert.sh", this.source_dir, ext);
      break;
    case 2:
      media_path = util.format("%s/media/templates/%s.template.html", this.source_dir, ext);
      if (!fs.existsSync(media_path)) {
        console.log("use default marboo tempalte");
        media_path = util.format("%s/media/templates/marboo.template.html", this.source_dir);
      }
  }
  if (sub_ext) {
    sub_path;
    switch (cate) {
      case 0:
        sub_path = util.format("%s/media/file_init/%s.init.%s", this.source_dir, sub_ext, ext);
        break;
      case 1:
        sub_path = util.format("%s/media/bin/%s.%s.convert.sh", this.source_dir, sub_ext, ext);
        if (!fs.exists(sub_path)) {
          sub_path = util.format("%s/media/bin/%s.convert.sh", this.source_dir, sub_ext);
        }
        break;
      case 2:
        sub_path = util.format("%s/media/templates/%s.%s.template.html", this.source_dir, sub_ext, ext);
        if (!fs.exists(sub_path)) {
          sub_path = util.format("%s/media/templates/%s.template.html", this.source_dir, sub_ext);
        }
    }
    if (fs.existsSync(sub_path)) {
      media_path = sub_path;
    }
  }
  return media_path;
};

exports.MBCore = MBCore;

main = function() {
  var core;
  core = new MBCore();
  core.initHttpServer();
  return core.watch();
};

// Generated by CoffeeScript 1.5.0
var Marboo, basename, dirname, goHome, httpPrefix, marboo, mbo, myLayout;

if (chrome.extension) {
  mbo = chrome.extension.getBackgroundPage();
  goHome = function() {
    return chrome.tabs.create({
      url: chrome.extension.getURL("index.html")
    });
  };
}

myLayout = "";

httpPrefix = "";

$(document).ready(function() {
  return myLayout = $('body').layout({
    west__size: 150,
    west__spacing_closed: 20,
    west__togglerLength_closed: 100,
    west__togglerAlign_closed: "top",
    west__togglerContent_closed: "",
    west__togglerTip_closed: "Open & Pin Menu",
    west__sliderTip: "Slide Open Menu",
    west__slideTrigger_open: "mouseover",
    center__maskContents: true
  });
});

basename = function(path) {
  return path.replace(/\\/g, '/').replace(/.*\//, '');
};

dirname = function(path) {
  return path.replace(/\\/g, '/').replace(/\/[^\/]*\/?$/, '');
};

String.prototype.endsWith = function(suffix) {
  return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

Marboo = function() {
  if (mbo) {
    httpPrefix = "http://localhost:3600";
    if (mbo.core().valid) {
      mbo.addEvent(mbo.core(), 'notify', this.processNotification);
    }
    if (mbo.current_file) {
      this.setFrameURL(mbo.current_file);
    }
    this.buildTree();
  } else {
    httpPrefix = "http://marboo.biz/i/build";
    this.buildDemo();
  }
  return this;
};

Marboo.prototype.checkValid = function() {
  if (mbo.core().valid) {

  } else {
    return mbo.notify(":( Marboo插件意外退出，请重新启动");
  }
};

Marboo.prototype.buildTree = function() {
  var files;
  files = mbo.core().listDir("");
  return this.generateUl($("#treeView"), "", files);
};

Marboo.prototype.generateUl = function(node, path, files) {
  var file, file_path, ul, _i, _len, _results;
  ul = $('<ul class="jqueryFileTree"></ul>');
  _results = [];
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    if (file.name.indexOf(".") === 0 || file.name.endsWith("~")) {
      continue;
    }
    file_path = [path, file.name].join("/");
    ul.append(this.generateli(file_path, parseInt(file.isDir)));
    _results.push(node.append(ul));
  }
  return _results;
};

Marboo.prototype.generateli = function(path, isDir) {
  var a, file_extension, li, url;
  li = "";
  if (isDir) {
    li = $(sprintf('<li class="directory collapsed" title="%s"></li>', path));
    a = $(sprintf('<a href="#">%s</a>', basename(path)));
    a.click(function() {
      return marboo.toggleList($(this).parent());
    });
    li.append(a);
  } else {
    url = sprintf("%s%s.html", httpPrefix, path);
    file_extension = basename(path).split('.').pop();
    li = $(sprintf('<li class="file ext_%s" title="%s"></li>', file_extension, path));
    a = $(sprintf('<a target="webView" href="%s">%s</a>', url, basename(path)));
    li.click(function() {
      return marboo.setFrameURL($(this).attr("title"));
    });
    li.dblclick(function() {
      return mbo.core().editFile($(this).attr("title"));
    });
    li.append(a);
  }
  return li;
};

Marboo.prototype.toggleList = function(node) {
  var files;
  marboo.checkValid();
  if (node.hasClass('collapsed')) {
    files = mbo.core().listDir(node.attr("title"));
    this.generateUl(node, node.attr("title"), files);
    return node.removeClass('collapsed').addClass('expanded');
  } else {
    node.removeClass('expanded').addClass('collapsed');
    return node.children("ul").remove();
  }
};

Marboo.prototype.buildDemo = function() {
  var files;
  files = [];
  files.push({
    "name": "Marboo-for-Web-介绍.md",
    "isDir": "0"
  });
  files.push({
    "name": "marboo-intro.remark.md",
    "isDir": "0"
  });
  files.push({
    "name": "markdown语法说明.md",
    "isDir": "0"
  });
  files.push({
    "name": "Markdown-Syntax.md",
    "isDir": "0"
  });
  files.push({
    "name": "样例笔记.ace.md",
    "isDir": "0"
  });
  files.push({
    "name": "一颗开花的树.poem.md",
    "isDir": "0"
  });
  files.push({
    "name": "HTML学习.ace.html",
    "isDir": "0"
  });
  files.push({
    "name": "2011-12-29-jekyll-introduction.md",
    "isDir": "0"
  });
  files.push({
    "name": "hello-world.c",
    "isDir": "0"
  });
  files.push({
    "name": "hello-world.ace.py",
    "isDir": "0"
  });
  files.push({
    "name": "Makefile",
    "isDir": "0"
  });
  return this.generateUl($("#treeView"), "", files);
};

Marboo.prototype.processNotification = function(type, path, isDir) {
  switch (type) {
    case 1:
      return marboo.addItem(path, isDir);
    case 2:
      return marboo.removeItem(path, isDir);
    case 3:
      return marboo.setFrameURL(path);
  }
};

Marboo.prototype.addItem = function(path, isDir) {
  var ul;
  if ($(sprintf("li[title='%s']", path)).length) {
    return;
  }
  if (dirname(path) === "") {
    return $("#treeView ul").append(marboo.generateli(path, isDir));
  } else {
    if ($(sprintf("li[title='%s'] ul:first", dirname(path)))) {
      ul = $(sprintf("li[title='%s'] ul:first", dirname(path)));
      return ul.append(marboo.generateli(path, isDir));
    }
  }
};

Marboo.prototype.removeItem = function(path, isDir) {
  var li, _i, _len, _ref, _results;
  _ref = $("li");
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    li = _ref[_i];
    if (li.title === path) {
      _results.push(li.remove());
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

Marboo.prototype.setFrameURL = function(path) {
  this.checkValid();
  mbo.core().checkHTML(path);
  mbo.current_file = path;
  return document.getElementById('webView').src = sprintf("%s%s.html", httpPrefix, mbo.current_file);
};

Marboo.prototype.editFile = function(obj) {
  marboo.checkValid();
  return mbo.core().editFile($(obj).attr("title"));
};

Marboo.prototype.saveNote = function(path, content) {
  marboo.checkValid();
  return mbo.core().saveNote(path, content);
};

Marboo.prototype.test = function() {
  return mbo.core().testEvent();
};

marboo = new Marboo();

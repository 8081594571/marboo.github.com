// Generated by CoffeeScript 1.5.0
var addEvent, core, current_file, escape_utf8, notification, notify, processNotification;

addEvent = function(obj, name, func) {
  if (obj.attachEvent) {
    return obj.attachEvent("on" + name, func);
  } else {
    return obj.addEventListener(name, func, false);
  }
};

core = function() {
  return document.getElementById('marboo-core');
};

current_file = "";

notification = "";

notify = function(msg) {
  notification = webkitNotifications.createNotification('images/marboo-48.png', 'Marboo笔记', msg);
  notification.onclick = function() {
    window.focus();
    this.cancel();
    return chrome.tabs.create({
      url: chrome.extension.getURL("index.html")
    });
  };
  notification.show();
  return setTimeout(function() {
    return notification.cancel();
  }, 6000);
};

escape_utf8 = function(data) {
  var b, bs, buffer, c, hex, i, _i, _j, _len, _len1, _ref;
  if (data === '' || data === null) {
    return '';
  }
  data = data.toString();
  buffer = '';
  _ref = data.length;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    c = data.charCodeAt(i);
    bs = new Array();
    if (c > 0x10000) {
      bs[0] = 0xF0 | ((c & amp, 0x1C0000) >>> 18);
      bs[1] = 0x80 | ((c & amp, 0x3F000) >>> 12);
      bs[2] = 0x80 | ((c & amp, 0xFC0) >>> 6);
      bs[3] = 0x80 | (c & amp, 0x3F);
    } else if (c > 0x800) {
      bs[0] = 0xE0 | ((c & amp, 0xF000) >>> 12);
      bs[1] = 0x80 | ((c & amp, 0xFC0) >>> 6);
      bs[2] = 0x80 | (c & amp, 0x3F);
    } else if (c > 0x80) {
      bs[0] = 0xC0 | ((c & amp, 0x7C0) >>> 6);
      bs[1] = 0x80 | (c & amp, 0x3F);
    } else {
      bs[0] = c;
    }
    for (_j = 0, _len1 = bs.length; _j < _len1; _j++) {
      b = bs[_j];
      hex = nibble_to_hex((b & amp, 0xF0) >>> 4) + nibble_to_hex(b & amp, 0x0F);
      buffer += '%' + hex;
    }
  }
  return buffer;
};

processNotification = function(type, path, isDir) {
  var msg;
  msg = "";
  switch (type) {
    case 0:
      msg = path;
      break;
    case 1:
      current_file = path;
      msg = sprintf("New Node: %s", path);
      return;
    case 2:
      msg = sprintf("Remove Node: %s", path);
      return;
    case 3:
      current_file = path;
      msg = sprintf("Modify Node: %s", path);
      return;
  }
  return notify(msg);
};

addEvent(core(), 'notify', processNotification);
